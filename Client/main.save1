
import os
import sys
import traceback
from serial_mt import MILDSerial
from net_mt import MILDNet
from dlms_mt.enums import ObjectType
from dlms_mt.objects.MILDDLMSObjectCollection import MILDDLMSObjectCollection
from MILDSettings import MILDSettings
from MILDDLMSReader import MILDDLMSReader
from dlms_mt.MILDDLMSClient import MILDDLMSClient
from common_mt.MILDCommon import MILDCommon
from dlms_mt.enums.DataType import DataType
import locale
from dlms_mt.MILDDateTime import MILDDateTime
from dlms_mt.internal._MILDCommon import _MILDCommon
from dlms_mt import MILDDLMSException, MILDDLMSExceptionResponse, MILDDLMSConfirmedServiceError, MILDDLMSTranslator
from dlms_mt import MILDByteBuffer, MILDDLMSTranslatorMessage, MILDReplyData
from dlms_mt.enums import RequestTypes, Security, InterfaceType
from dlms_mt.secure.MILDDLMSSecureClient import MILDDLMSSecureClient



import json
from pymongo import MongoClient

import json
import xmltodict

client = MongoClient("mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.5.3")
db = client['countries_db']
collection_currency = db['currency']





try:
    import pkg_resources
    #pylint: disable=broad-except
except Exception:
    #It's OK if this fails.
    print("pkg_resources not found")

#pylint: disable=too-few-public-methods,broad-except
class sampleclient():
    @classmethod
    def main(cls, args):
        try:
            print("dlms_mt version: " + pkg_resources.get_distribution("dlms_mt").version)
            print("net_mt version: " + pkg_resources.get_distribution("net_mt").version)
            print("serial_mt version: " + pkg_resources.get_distribution("serial_mt").version)
        except Exception:
            #It's OK if this fails.
            print("pkg_resources not found")

        # args: the command line arguments
        reader = None
        settings = MILDSettings()
        try:
            # //////////////////////////////////////
            #  Handle command line parameters.
            ret = settings.getParameters(args)
            if ret != 0:
                return
            # //////////////////////////////////////
            #  Initialize connection settings.
            if not isinstance(settings.media, (MILDSerial, MILDNet)):
                raise Exception("Unknown media type.")
            # //////////////////////////////////////
            reader = MILDDLMSReader(settings.client, settings.media, settings.trace, settings.invocationCounter)
            settings.media.open()
            print(settings.readObjects)
            if settings.readObjects:
                
                read = False
                reader.initializeConnection()
                print('________main_sucess6')
                if settings.outputFile and os.path.exists(settings.outputFile):
                    try:
                        c = MILDDLMSObjectCollection.load(settings.outputFile)
                        settings.client.objects.extend(c)
                        if settings.client.objects:
                            read = True
                            print('________main_sucess')

                    except Exception:
                        print('________main_sucess2')
                        read = False
                if not read:
                    print('________main_sucess3')
                    reader.getAssociationView()
                for k, v in settings.readObjects:
                    print('________main_sucess5')
                    obj = settings.client.objects.findByLN(ObjectType.NONE, k)
                    if obj is None:
                        raise Exception("Unknown logical name:" + k)
                    val = reader.read(obj, v)
                    reader.showValue(v, val)
                if settings.outputFile:
                    settings.client.objects.save(settings.outputFile)
            else:
                print('________main_sucess4')
                reader.readAll(settings.outputFile)
                with open('/var/www/mildtrix_yash/Mildtrix.DLMS.Client.Example.python/device.xml') as xml_file:
                        data_dict = xmltodict.parse(xml_file.read())
                        xml_file.close()

                        collection_currency.insert_one(data_dict)
                        # if pymongo >= 3.0 use insert_many() for inserting many documents
                        #collection_currency.insert_many(file_data)
                        print(data_dict,'sent data to mongodb sucessfully')
                        client.close()

        except (ValueError, MILDDLMSException, MILDDLMSExceptionResponse, MILDDLMSConfirmedServiceError) as ex:
            print(ex)
        except (KeyboardInterrupt, SystemExit, Exception) as ex:
            traceback.print_exc()
            if settings.media:
                settings.media.close()
            reader = None
        finally:
            if reader:
                try:
                    reader.close()
                except Exception:
                    traceback.print_exc()
            print("Ended. Press any key to continue.")

if __name__ == '__main__':
   
    sampleclient.main(sys.argv)
